{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This CFT provisions AWS VPC, ALB and ASG for Wordpress HA",
    "Parameters": {
        "WebServerKeyName": {
            "Description": "This key will be used to SSH to our EC2 instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        }
    },
    
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.99.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "albasg-vpc"
                    }
                ]
            }
        },
        
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "DependsOn": "VPC",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "albasg-igw"
                    }
                ]
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "DMZ1public": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.1.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMZ1public"
                    }
                ]
            }
        },
        "DMZ2public": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.2.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMZ2public"
                    }
                ]
            }
        },
        "AppLayer1Private": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.11.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AppLayer1Private"
                    }
                ]
            }
        },
        "AppLayer2Private": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.12.0/24",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AppLayer2Private"
                    }
                ]
            }
        },
        "PublicRT": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PublicRT"
                    }
                ]
            }
        },
        "RouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ1public"
                },
                "RouteTableId": {
                    "Ref": "PublicRT"
                }
            }
        },
        "RouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ2public"
                },
                "RouteTableId": {
                    "Ref": "PublicRT"
                }
            }
        },
        "RoutePublicToInternet": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRT"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "DependsOn": "VPCGatewayAttachment"
        },
        "NATElasticIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            },
            "DependsOn": "VPCGatewayAttachment"
        },
        "NATGateway": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "NATElasticIP",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATElasticIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "DMZ2public"
                }
            }
        },
        "PrivateRT": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrivateRT"
                    }
                ]
            }
        },
        "NATGatewayRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRT"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                }
            }
        },
        "RouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer1Private"
                },
                "RouteTableId": {
                    "Ref": "PrivateRT"
                }
            }
        },
        "RouteTableAssociationD": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer2Private"
                },
                "RouteTableId": {
                    "Ref": "PrivateRT"
                }
            }
        },
        "DMZNACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMZNACL"
                    }
                ]
            }
        },
        "SubnetNetworkAssociationA": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ1public"
                },
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                }
            }
        },
        "SubnetNetworkAssociationB": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ2public"
                },
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                }
            }
        },
        "DMZNACLEntryIngress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryIngress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryIngress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryIngress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryEgress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryEgress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "DMZNACLEntryEgress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        
        "DMZNACLEntryEgress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "APPNACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "APPNACL"
                    }
                ]
            }
        },
        "SubnetNetworkAssociationC": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer1Private"
                },
                "NetworkAclId": {
                    "Ref": "APPNACL"
                }
            }
        },
        "SubnetNetworkAssociationD": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer2Private"
                },
                "NetworkAclId": {
                    "Ref": "APPNACL"
                }
            }
        },
        "APPNACLEntryIngress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "10.99.0.0/16"
            }
        },
        "APPNACLEntryIngress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "10.99.0.0/16"
            }
        },
        "APPNACLEntryIngress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "10.99.0.0/16"
            }
        },
        "APPNACLEntryIngress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "APPNACLEntryEgress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "APPNACLEntryEgress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "APPNACLEntryEgress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "120",
                "Protocol": "6",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "APPNACLEntryEgress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "APPNACL",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "APPNACL"
                },
                "RuleNumber": "130",
                "Protocol": "6",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "10.99.0.0/16"
            }
        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "DMZ1public"
                    },
                    {
                        "Ref": "DMZ2public"
                    }
                ],
                "Name": "load-balancer",
                "Type": "application",
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "IpAddressType": "ipv4"
            }
        },
        "Listener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "TargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": "10",
                "HealthCheckPath": "/phpinfo.php",
                "HealthCheckPort": "80",
                "HealthCheckProtocol": "HTTP",
                "HealthyThresholdCount": "2",
                "Name": "TG1",
                "Port": "80",
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": "2",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "bastion-wordpress",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BastionSG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 22,
                        "ToPort": 22,
                        "IpProtocol": "tcp"
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "alb-wordpress",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "LoadBalancerSG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 443,
                        "ToPort": 443,
                        "IpProtocol": "tcp"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 80,
                        "ToPort": 80,
                        "IpProtocol": "tcp"
                    }
                ]
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ec2-wordpress",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WebServerSG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "FromPort": 22,
                        
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroup"
                        },
                        "ToPort": 22
                    },
                    {
                        "FromPort": 80,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        },
                        "ToPort": 80
                    }
                    ]
                }
            },
            "LaunchConfiguration": {
                "Type": "AWS::AutoScaling::LaunchConfiguration",
                "DependsOn": "VPCGatewayAttachment",
                "Properties": {
                    "ImageId": "ami-01cc34ab2709337aa",
                    "InstanceType": "t3.micro",
                    "SecurityGroups": [
                        {
                            "Ref": "WebServerSecurityGroup"
                        }
                    ],
                    "KeyName": {
                        "Ref": "WebServerKeyName"
                    },
                    "AssociatePublicIpAddress": "false",
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                "#!/bin/bash\n",
                                "yum update -y\n",
                                "wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n",
                                "yum localinstall -y mysql57-community-release-el7-8.noarch.rpm\n",
                                "yum install -y mysql-community-server\n",
                                "yum install -y httpd php php-mysqlnd git\n",
                                "cd /var/www/html\n",
                                "wget https://wordpress.org/latest.tar.gz\n",
                                "tar -xzf latest.tar.gz\n",
                                "cp wordpress/wp-config-sample.php wp-config.php\n",
                                "groupadd www\n",
                                "usermod -aG www ec2-user\n",
                                "chown -R root:www /var/www\n",
                                "echo '<?php phpinfo(); ?>' > /var/www/html/phpinfo.php\n",
                                "service httpd start\n",
                                "chkconfig httpd on\n",
                                "service mysqld start\n",
                                "systemctl enable mysqld.service\n",
                                "chkconfig mysqld on\n"
                                ]
                            ]
                        }
                    },
                    "InstanceMonitoring": "true"
                }
            },
        
            "AutoScalingGroup": {
                "Type": "AWS::AutoScaling::AutoScalingGroup",
                "Properties": {
                    "TargetGroupARNs": [
                        {
                            "Ref": "TargetGroup"
                        }
                    ],
                    "LaunchConfigurationName": {
                        "Ref": "LaunchConfiguration"
                    },
                    "DesiredCapacityType": "2",
                    "MinSize": "2",
                    "MaxSize": "4",
                    "Cooldown": "300",
                    "HealthCheckGracePeriod": "300",
                    "HealthCheckType": "ELB",
                    "VPCZoneIdentifier": [
                        {
                            "Ref": "AppLayer1Private"
                        },
                        {
                            "Ref": "AppLayer2Private"
                        }
                    ],
                    "Tags": [
                        {
                            "PropagateAtLaunch": "true",
                            "Key": "Name",
                            "Value": "Worpress-instances"
                        }
                    ]
                },
                "BastionInstance": {
                    "Type": "AWS::EC2::Instance",
                    "Properties": {
                        "InstanceType": "t2.micro",
                        "ImageId": "ami-01cc34ab2709337aa",
                        "KeyName": {
                            "Ref": "WebServerKeyName"
                        },
                        "NetworkInterfaces": [
                            {
                                "GroupSet": [
                                    {
                                        "Ref": "BastionSecurityGroup"
                                    }
                                ],
                                "AssociatePublicIpAddress": "true",
                                "DeviceIndex": "0",
                                "DeleteOnTermination": "true",
                                "SubnetId": {
                                    "Ref": "DMZ1public"
                                }
                            }
                        ],
                        "Tags": [
                            {
                                "Key": "Name",
                                "Value": "bastion-host"
                            }
                        ]
                    }
                }
            },
            "Outputs": {
                "publicIpAddress1": {
                    "Description": "Public IP address of bastion instance",
                    "Value": {
                        "Fn::GetAtt": [
                            "BastionInstance",
                            "PublicIp"
                        ]
                    }
                },
                "privateIpAddress1": {
                    "Description": "Private IP address of bastion instance",
                    "Value": {
                        "Fn::GetAtt": [
                            "BastionInstance",
                            "PrivateIp"
                        ]
                    }
                }
            }
        }
}
